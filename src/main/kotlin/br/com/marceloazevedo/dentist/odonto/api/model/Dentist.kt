package br.com.marceloazevedo.dentist.odonto.api.model

import br.com.marceloazevedo.dentist.odonto.api.converter.LocalDateConverter
import br.com.marceloazevedo.dentist.odonto.api.converter.LocalDateTimeConverter
import br.com.marceloazevedo.dentist.odonto.api.enum.Genre
import com.amazonaws.services.dynamodbv2.datamodeling.*
import java.time.Instant
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.*

@DynamoDBTable(tableName = "dentist")
data class Dentist(
        @DynamoDBHashKey @DynamoDBAutoGeneratedKey
        val id: String? = UUID.randomUUID().toString(),
        val cro: CRO,
        @DynamoDBAttribute
        val name: String,
        @DynamoDBAttribute
        val cpf: String,
        @DynamoDBAttribute
        val rg: String,
        @DynamoDBTyped(DynamoDBMapperFieldModel.DynamoDBAttributeType.S)
        val genre: Genre,
        @DynamoDBTypeConverted(converter = LocalDateConverter::class)
        val birthDate: LocalDate,
        @DynamoDBTyped(DynamoDBMapperFieldModel.DynamoDBAttributeType.L)
        val contacts: List<Contact>,
        @DynamoDBTyped(DynamoDBMapperFieldModel.DynamoDBAttributeType.L)
        val address: List<Address>,
        @DynamoDBTypeConverted(converter = LocalDateTimeConverter::class)
        val createdAt: LocalDateTime = LocalDateTime.now(),
        @DynamoDBTypeConverted(converter = LocalDateTimeConverter::class)
        val updatedAt: LocalDateTime? = null
) {
        override fun toString(): String {
                return "Dentist(id=$id, cro=$cro, name='$name', cpf='$cpf', rg='$rg', genre=$genre, birthDate=$birthDate, contacts=$contacts, address=$address, createdAt=$createdAt, updatedAt=$updatedAt)"
        }
}
